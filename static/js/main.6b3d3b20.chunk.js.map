{"version":3,"sources":["components/DraggableComponentButtons.js","actions.js","components/DraggableComponent.js","components/DraggableComponentConfigPanel.js","components/ComponentTypeSelector.js","draggable_components/DC_Button.js","draggable_components/DC_Input.js","draggable_components/DC_Container.js","tools.js","components/DraggablePanel.js","reducers/edit_mode.js","reducers/config.js","reducers/index.js","redux-store.js","components/TopPanel.js","components/RootPanelsContainer.js","components/DraggableComponentsDrawer.js","routes/DynamicPage.js","components/LeftPanel.js","App.js","serviceWorker.js","index.js"],"names":["DraggableComponentButtons","className","onClick","component_id","props","editmode_select_component","dispatch","type","EDITMODE_SELECT_COMPONENT","this","onDelete","React","Component","DraggableComponent","state","deleted","deleteComponent","bind","config_delete_component","CONFIG_DELETE_COMPONENT","setState","children","connect","store_config","config","DraggableComponentConfigPanel","last_component_props","component_props","save","edited_component","components","target_component_id","config_edit_component","Section","option","options","i","push","cloneElement","key","value","selected","default","onChange","key_name","open","icon","name","Option","text","custom_icon","ComponentTypeSelector","PreviewComponent","preview_component_props","default_props","opened_section","undefined","preview_component","onSectionClick","prev_props","section_key_name","new_section_name","new_props","section","sections","mapStateToProps","_DC_Button_CP","icon_color_style","width","height","borderRadius","icon_color_red","backgroundColor","icon_color_blue","icon_type","display","alignItems","justifyContent","fontSize","icon_type_normal","color","fontWeight","icon_type_outlined","boxSizing","border","icon_type_lowemp","onInputChange","onTypeSelectorChange","event","target","ts_props","placeholder","DC_Button","style","DC_Button_CP","style_props","size","emphasis","_DC_Input_CP","api_name","display_name","input_type","default_value","pattern","DC_Input_CP","DC_Input","prop","checkValidity","invalid","DC_Container_CP","DC_Ð¡ontainer","dragOver","child_components","onDragEnter","onDragLeave","onDragOver","onDrop","next_props","next_state","store_component","l","length","component","element","e","preventDefault","component_type","dataTransfer","getData","stopPropagation","new_component","createDraggableComponentFromType","new_child_components","new_component_object","panel_id","config_component_edit_children","CONFIG_COMPONENT_EDIT_CHILDREN","generateRandomId","Math","floor","random","toString","id","DC_Container","DraggablePanel","empty","deletePanel","panels","store_panel","component_el","CONFIG_EDIT_COMPONENT","component_object","CONFIG_PANEL_ADD_COMPONENT","config_assign_component","config_delete_panel","CONFIG_DELETE_PANEL","EDITMODE_ENTER","EDITMODE_LEAVE","CONFIG_ADD_PANEL","INITIAL_STATE","active","selected_component","combineReducers","edit_mode","action","panel","new_components_object","child_component_id","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","TopPanel","switchEditmode","store_editmode","editmode_leave","editmode_enter","RootPanelContainer","child_panels","createNewPanel","onPanelDeleted","new_panel","config_create_panel","new_panel_object","new_state","splice","hidden","new_container","onDragStart","effectAllowed","setData","draggable","DraggableComponentsDrawer","DynamicPage","root_panel_containers_count","createRootContainer","containers","RootPanelsContainer","ComponentEditMode","selected_component_id","LeftPanel","App","store","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b3d3b20.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { editmode_select_component } from \"../actions\";\r\n\r\nexport default class DraggableComponentButtons extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"component-buttons\">\r\n                <div\r\n                className=\"button\"\r\n                onClick={ () => editmode_select_component(this.props.component_id, this.props.dispatch) }>\r\n                    <i className=\"fas fa-sliders-h\"></i>\r\n                </div>\r\n                <div\r\n                className=\"button red\"\r\n                onClick={ this.props.onDelete }>\r\n                    <i className=\"fas fa-times\"></i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDraggableComponentButtons.propTypes = {\r\n    component_id: PropTypes.string.isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n","import React from \"react\";\r\n\r\nimport { generateRandomId } from \"./tools\";\r\n\r\nimport DraggablePanel from \"./components/DraggablePanel\";\r\n\r\n// We probably should use this functions only outside this file, they are just wrappers\r\n\r\nexport const EDITMODE_ENTER = \"EDITMODE_ENTER\";\r\nexport function editmode_enter(dispatch) {\r\n    dispatch({ type: EDITMODE_ENTER });\r\n}\r\n\r\nexport const EDITMODE_LEAVE = \"EDITMODE_LEAVE\";\r\nexport function editmode_leave(dispatch) {\r\n    dispatch({ type: EDITMODE_LEAVE });\r\n}\r\n\r\nexport const EDITMODE_SELECT_COMPONENT = \"EDITMODE_SELECT_COMPONENT\";\r\nexport function editmode_select_component(component_id, dispatch) {\r\n    dispatch({ type: EDITMODE_SELECT_COMPONENT, component_id });\r\n}\r\n\r\n// Add a new panel\r\n// TODO: @misc We should have an interface for component object\r\nexport const CONFIG_ADD_PANEL = \"CONFIG_ADD_PANEL\";\r\nexport function config_add_panel(panel_object, dispatch) {\r\n    dispatch({ type: CONFIG_ADD_PANEL, panel: panel_object });\r\n}\r\n\r\n// Delete a panel\r\nexport const CONFIG_DELETE_PANEL = \"CONFIG_DELETE_PANEL\";\r\nexport function config_delete_panel(panel_id, dispatch) {\r\n    dispatch({ type: CONFIG_DELETE_PANEL, panel_id });\r\n}\r\n\r\n// Delete a component\r\nexport const CONFIG_DELETE_COMPONENT = \"CONFIG_DELETE_COMPONENT\";\r\nexport function config_delete_component(component_id, dispatch) {\r\n    dispatch({ type: CONFIG_DELETE_COMPONENT, component_id });\r\n}\r\n\r\n// Assign component to the panel (component must be registered using CONFIG_ADD_COMPONENT)\r\nexport const CONFIG_PANEL_ADD_COMPONENT = \"CONFIG_PANEL_ADD_COMPONENT\";\r\nexport function config_panel_add_component(panel_id, component_id, dispatch) {\r\n    dispatch({ type: CONFIG_PANEL_ADD_COMPONENT, panel_id, component_id });\r\n}\r\n\r\n// Add/edit component in the store\r\nexport const CONFIG_EDIT_COMPONENT = \"CONFIG_EDIT_COMPONENT\";\r\nexport function config_edit_component(component_object, dispatch) {\r\n    dispatch({ type: CONFIG_EDIT_COMPONENT, component_object });\r\n}\r\n\r\n// Set children for a component (used in DC_Container)\r\nexport const CONFIG_COMPONENT_EDIT_CHILDREN = \"CONFIG_COMPONENT_EDIT_CHILDREN\";\r\nexport function config_component_edit_children(component_id, child_components, dispatch) {\r\n    dispatch({ type: CONFIG_COMPONENT_EDIT_CHILDREN, component_id, child_components });\r\n}\r\n\r\n// Create a new panel, add to `config` redux store and return a React element\r\nexport function config_create_panel(dispatch) {\r\n    const panel_id = generateRandomId();\r\n\r\n    const panel_object = {\r\n        id: panel_id,\r\n        child_components: []\r\n    }\r\n\r\n    // Add a panel to the store\r\n    dispatch({ type: CONFIG_ADD_PANEL, panel: panel_object });\r\n\r\n    // Create a React element\r\n    const new_panel_el = <DraggablePanel key={ panel_id } panel_id={ panel_id } />\r\n\r\n    return new_panel_el;\r\n}\r\n\r\n// Assign component to the panel\r\nexport function config_assign_component(component_el, component_type, panel_id, dispatch) {\r\n    // TODO: @misc We should have an interface for component object\r\n    const component_object = {\r\n        element: component_el,\r\n        type: component_type,\r\n        panel_id: panel_id\r\n    }\r\n\r\n    // TODO: @misc not sure if this is the best way to do this\r\n    dispatch({ type: CONFIG_EDIT_COMPONENT, component_object });\r\n    dispatch({ type: CONFIG_PANEL_ADD_COMPONENT, panel_id, component_id: component_el.props.component_id });\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport DraggableComponentButtons from \"./DraggableComponentButtons\";\r\n\r\nimport { config_delete_component } from \"../actions\";\r\n\r\nclass DraggableComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            deleted: false\r\n        }\r\n\r\n        this.deleteComponent = this.deleteComponent.bind(this);\r\n    }\r\n\r\n    deleteComponent() {\r\n        config_delete_component(this.props.component_id, this.props.dispatch);\r\n        this.setState({ deleted: true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.deleted) return false;\r\n\r\n        return (\r\n            <div\r\n            className=\"ui-draggable-component\"\r\n            >\r\n                { this.props.children }\r\n\r\n                <DraggableComponentButtons\r\n                component_id={ this.props.component_id }\r\n                onDelete={ this.deleteComponent }\r\n                dispatch={ this.props.dispatch } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDraggableComponent.propTypes = {\r\n    component_id: PropTypes.string.isRequired,\r\n\r\n    children: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DraggableComponent);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { config_edit_component } from \"../actions\";\r\n\r\nclass DraggableComponentConfigPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            last_component_props: props.component_props\r\n        }\r\n\r\n        this.save = this.save.bind(this);\r\n    }\r\n\r\n    save() {\r\n        const edited_component = this.props.store_config.components[this.props.target_component_id];\r\n\r\n        edited_component.props = { ...edited_component.props, ...this.props.component_props };\r\n\r\n        // Save the component in `config` redux store\r\n        config_edit_component(edited_component, this.props.dispatch);\r\n\r\n        this.setState({ last_component_props: this.props.component_props });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content component-editor\">\r\n                { this.props.children }\r\n\r\n                <div className={\"bottom-panel\" +\r\n                (this.state.last_component_props === this.props.component_props ? \" hidden\" : \"\")}>\r\n                    <div></div>\r\n                    <div>\r\n                        <button onClick={ this.save } className=\"ui-button1 big low-emp\">save</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDraggableComponentConfigPanel.propTypes = {\r\n    target_component_id: PropTypes.string.isRequired,\r\n    component_props: PropTypes.object.isRequired,\r\n\r\n    children: PropTypes.any.isRequired,\r\n\r\n    store_config: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DraggableComponentConfigPanel);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./ComponentTypeSelector.css\";\r\n\r\nexport class Section extends React.Component {\r\n    // TODO: @performance maybe?\r\n    render() {\r\n        let options = [];\r\n        let option;\r\n\r\n        for(const i in this.props.children) {\r\n            option = this.props.children[i];\r\n\r\n            options.push(React.cloneElement(option, {\r\n                key: option.props.value,\r\n                selected: (this.props.selected || this.props.default) === option.props.value,\r\n                onClick: () => { this.props.onChange(this.props.key_name, this.props.children[i].props.value) }\r\n            }));\r\n        }\r\n\r\n        return (\r\n            <div className={ \"section\" + (this.props.open ? \" open\" : \"\") }>\r\n                <div className=\"name\" onClick={ this.props.onClick }>{ this.props.icon } { this.props.name }</div>\r\n                <div className=\"name-arrow\"><i className=\"fas fa-chevron-down\"></i></div>\r\n                <div className=\"container\">\r\n                    { options }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSection.propTypes = {\r\n    key_name: PropTypes.string.isRequired,\r\n    icon: PropTypes.element.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    selected: PropTypes.string,\r\n    default: PropTypes.string,\r\n\r\n    children: PropTypes.array.isRequired,\r\n    open: PropTypes.bool,\r\n\r\n    // We shouldn't put .isRequired here because these props will be given to the element by ComponentTypeSelector\r\n    onChange: PropTypes.func,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport function Option(props) {\r\n    return (\r\n        <div\r\n        className={ \"option\" + (props.selected ? \" selected\" : \"\") }\r\n        onClick={ props.onClick }>\r\n            <div>\r\n                <div className=\"tick\"></div> { props.text }\r\n            </div>\r\n            <div className=\"custom-icon\">{ props.custom_icon }</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nOption.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    custom_icon: PropTypes.element,\r\n\r\n    // We shouldn't put .isRequired here because these props will be given to the element by Section component\r\n    selected: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n}\r\n\r\nexport default class ComponentTypeSelector extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            PreviewComponent: () => false,\r\n            preview_component_props: { component_id: \"-1\", dispatch: () => false, ...props.default_props },\r\n\r\n            opened_section: undefined\r\n        }\r\n\r\n        // Get the preview component\r\n        if(this.props.preview_component) {\r\n            this.state.PreviewComponent = this.props.preview_component;\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSectionClick = this.onSectionClick.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        // Parent provided new default props\r\n        if(prev_props.default_props !== this.props.default_props) {\r\n            this.setState({ preview_component_props: {\r\n                component_id: \"-1\", dispatch: () => false,\r\n                ...this.props.default_props\r\n            } });\r\n        }\r\n    }\r\n\r\n    onSectionClick(section_key_name) {\r\n        let new_section_name = section_key_name;\r\n\r\n        if(section_key_name === this.state.opened_section) {\r\n            new_section_name = undefined;\r\n        }\r\n\r\n        this.setState({ opened_section: new_section_name });\r\n    }\r\n\r\n    onChange(key, value) {\r\n        let new_props = this.state.preview_component_props;\r\n        new_props[key] = value;\r\n\r\n        // TODO: @high @misc This is bad because we also delete this from this component\r\n        // Thank you js for not having pointers\r\n        delete new_props.dispatch;\r\n        delete new_props.component_id;\r\n\r\n        // Send the props to the parent component\r\n        this.props.onChange && this.props.onChange(new_props);\r\n    }\r\n\r\n    // TODO: @performance maybe?\r\n    render() {\r\n        let sections = [];\r\n        let section;\r\n\r\n        for(const i in this.props.children) {\r\n            section = this.props.children[i];\r\n\r\n            sections.push(React.cloneElement(section, {\r\n                key: section.props.key_name,\r\n                open: this.state.opened_section === section.props.key_name,\r\n                selected: this.state.preview_component_props[section.props.key_name],\r\n                onChange: this.onChange,\r\n                onClick: () => this.onSectionClick(this.props.children[i].props.key_name)\r\n            }));\r\n        }\r\n\r\n        return (\r\n            <div className=\"component-type-selector\">\r\n                <div className=\"preview-window\">\r\n                    <this.state.PreviewComponent { ...this.state.preview_component_props } />\r\n                </div>\r\n\r\n                { sections }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nComponentTypeSelector.propTypes = {\r\n    preview_component: PropTypes.func.isRequired,\r\n    children: PropTypes.array.isRequired,\r\n    default_props: PropTypes.object,\r\n\r\n    onChange: PropTypes.func\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DraggableComponent from \"../components/DraggableComponent\";\r\nimport DraggableComponentConfigPanel from \"../components/DraggableComponentConfigPanel\";\r\n\r\nimport ComponentTypeSelector, { Section, Option } from \"../components/ComponentTypeSelector\";\r\n\r\n// This is used for both components\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\n// Left panel config for this component\r\n// TODO: @naming\r\nclass _DC_Button_CP extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get component props from redux store\r\n        const component_props = props.store_config.components[props.target_component_id].props || {};\r\n\r\n        this.state = {\r\n            component_props\r\n        }\r\n\r\n        const icon_color_style = {\r\n            width: 8,\r\n            height: 8,\r\n            borderRadius: 3\r\n        }\r\n\r\n        this.icon_color_red = {\r\n            ...icon_color_style,\r\n            backgroundColor: \"var(--color-red)\"\r\n        }\r\n\r\n        this.icon_color_blue = {\r\n            ...icon_color_style,\r\n            backgroundColor: \"var(--color-blue)\"\r\n        }\r\n\r\n        const icon_type = {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n\r\n            width: 14,\r\n            height: 14,\r\n            borderRadius: 3,\r\n\r\n            fontSize: 10,\r\n        }\r\n\r\n        this.icon_type_normal = {\r\n            ...icon_type,\r\n            color: \"rgba(255, 255, 255, 0.95)\",\r\n            fontWeight: 500,\r\n            backgroundColor: \"var(--color-blue)\"\r\n        }\r\n\r\n        this.icon_type_outlined = {\r\n            ...icon_type,\r\n            color: \"var(--color-blue)\",\r\n            fontWeight: 500,\r\n            boxSizing: \"border-box\",\r\n            border: \"1px solid var(--color-blue)\"\r\n        }\r\n\r\n        this.icon_type_lowemp = {\r\n            ...icon_type,\r\n            color: \"var(--color-blue)\",\r\n            fontWeight: 500,\r\n        }\r\n\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onTypeSelectorChange = this.onTypeSelectorChange.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        if(prev_props.target_component_id !== this.props.target_component_id) {\r\n            // Different component was selected, update the props\r\n            const component_props = this.props.store_config.components[this.props.target_component_id].props || {};\r\n\r\n            this.setState({ component_props });\r\n        }\r\n    }\r\n\r\n    onInputChange(event) {\r\n        // TODO: @misc do some checks here\r\n        if(!event.target.name) return false;\r\n\r\n        this.setState({ component_props: { ...this.state.component_props, [event.target.name]: event.target.value } });\r\n    }\r\n\r\n    onTypeSelectorChange(ts_props) {\r\n        // TODO: @performace\r\n        this.setState({ component_props: { ...this.state.component_props, ...ts_props } })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DraggableComponentConfigPanel\r\n            store_config={ this.props.store_config }\r\n            dispatch={ this.props.dispatch }\r\n\r\n            component_props={ this.state.component_props }\r\n            target_component_id={ this.props.target_component_id }>\r\n                <div className=\"component-intro-block\">\r\n                    <div className=\"name\">Button</div>\r\n                    <div className=\"description\">Used mainly for API calls.</div>\r\n                </div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Text</div>\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    className=\"ui-input1\"\r\n                    onChange={ this.onInputChange }\r\n                    value={ this.state.component_props.text || \"\" }\r\n                    placeholder=\"Button\" />\r\n                </div>\r\n\r\n                <ComponentTypeSelector\r\n                onChange={ this.onTypeSelectorChange }\r\n                preview_component={ DC_Button }\r\n                default_props={ this.state.component_props }>\r\n                    <Section key_name=\"size\" default=\"bigger\" name=\"Size\" icon={ <i className=\"fas fa-ruler\"></i> }>\r\n                        <Option value=\"small\" text=\"Small\" />\r\n                        <Option value=\"bigger\" text=\"Default\" />\r\n                        <Option value=\"big\" text=\"Big\" />\r\n                    </Section>\r\n                    <Section key_name=\"emphasis\" default=\"normal\" name=\"Type\"\r\n                    icon={ <i className=\"fas fa-swatchbook\"></i> }>\r\n                        <Option value=\"normal\" text=\"Normal\" custom_icon={\r\n                            <div style={ this.icon_type_normal }>A</div>\r\n                        } />\r\n                        <Option value=\"outlined\" text=\"Outlined\" custom_icon={\r\n                            <div style={ this.icon_type_outlined }>A</div>\r\n                        } />\r\n                        <Option value=\"low-emp\" text=\"Low emphasis\" custom_icon={\r\n                            <div style={ this.icon_type_lowemp }>A</div>\r\n                        } />\r\n                    </Section>\r\n                    <Section key_name=\"color\" default=\"blue\" name=\"Color\" icon={ <i className=\"fas fa-palette\"></i> }>\r\n                        <Option value=\"blue\" text=\"Blue\" custom_icon={ <div style={ this.icon_color_blue }></div> } />\r\n                        <Option value=\"red\" text=\"Red\" custom_icon={ <div style={ this.icon_color_red }></div> } />\r\n                    </Section>\r\n                </ComponentTypeSelector>\r\n            </DraggableComponentConfigPanel>\r\n        );\r\n    }\r\n}\r\n\r\n_DC_Button_CP.propTypes = {\r\n    target_component_id: PropTypes.string.isRequired,\r\n\r\n    store_config: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nexport const DC_Button_CP = connect(mapStateToProps)(_DC_Button_CP);\r\n\r\nclass DC_Button extends React.Component {\r\n    render() {\r\n        // This is the \"style\" props for this component, if you need to access config_store, component_id, or anything\r\n        // else internal, use this.props instead\r\n        let style_props;\r\n\r\n        // Check if this component is in redux store\r\n        if( this.props.component_id !== \"-1\" && this.props.store_config &&\r\n            this.props.store_config.components[this.props.component_id] ) {\r\n            style_props = this.props.store_config.components[this.props.component_id].props || {};\r\n        } else {\r\n            // This component is not in the redux store, it's styles are probably in this.props\r\n            style_props = this.props;\r\n        }\r\n\r\n        // TODO: @misc This is messy\r\n        let className = \"ui-button\" + (style_props.type || \"1\");\r\n\r\n        if(style_props.size) {\r\n            className += \" \" + style_props.size;\r\n        } else {\r\n            className += \" bigger\";\r\n        }\r\n\r\n        if(style_props.color) className += \" \" + style_props.color;\r\n        if(style_props.emphasis) className += \" \" + style_props.emphasis;\r\n\r\n        return (\r\n            <DraggableComponent component_id={ this.props.component_id }>\r\n                <button\r\n                className={ className }\r\n                >\r\n                    { style_props.text || \"button\" }\r\n                </button>\r\n            </DraggableComponent>\r\n        )\r\n    }\r\n}\r\n\r\nDC_Button.propTypes = {\r\n    text: PropTypes.string,\r\n    type: PropTypes.string,\r\n    size: PropTypes.string,\r\n    color: PropTypes.string,\r\n    emphasis: PropTypes.string,\r\n\r\n    store_config: PropTypes.object,\r\n\r\n    component_id: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default connect(mapStateToProps)(DC_Button);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport DraggableComponent from \"../components/DraggableComponent\";\r\nimport DraggableComponentConfigPanel from \"../components/DraggableComponentConfigPanel\";\r\n\r\n// This is used for both components\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\n// Left panel config for this component\r\n// TODO: @naming\r\nexport class _DC_Input_CP extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get component props from redux store\r\n        const component_props = props.store_config.components[props.target_component_id].props || {};\r\n\r\n        this.state = {\r\n            component_props\r\n        }\r\n\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        if(prev_props.target_component_id !== this.props.target_component_id) {\r\n            // Different component was selected, update the props\r\n            const component_props = this.props.store_config.components[this.props.target_component_id].props || {};\r\n\r\n            this.setState({ component_props });\r\n        }\r\n    }\r\n\r\n    onInputChange(event) {\r\n        // TODO: @misc do some checks here\r\n        if(!event.target.name) return false;\r\n\r\n        this.setState({ component_props: { ...this.state.component_props, [event.target.name]: event.target.value } });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DraggableComponentConfigPanel\r\n            store_config={ this.props.store_config }\r\n            dispatch={ this.props.dispatch }\r\n\r\n            component_props={ this.state.component_props }\r\n            target_component_id={ this.props.target_component_id }>\r\n                <div className=\"component-intro-block\">\r\n                    <div className=\"name\">Input Field</div>\r\n                    <div className=\"description\">A basic input field.</div>\r\n                </div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Component name</div>\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"api_name\"\r\n                    className=\"ui-input1 monospace\"\r\n                    onChange={ this.onInputChange }\r\n                    value={ this.state.component_props.api_name || \"\" }\r\n                    placeholder=\"username\" />\r\n                    <div className=\"ui-text small gray\"><i className=\"fas fa-exclamation-circle\"></i>\r\n                    This name will be used in API calls.</div>\r\n                </div>\r\n\r\n                <div className=\"ui-spacer dot\"></div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Display name</div>\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"display_name\"\r\n                    className=\"ui-input1\"\r\n                    onChange={ this.onInputChange }\r\n                    value={ this.state.component_props.display_name || \"\" }\r\n                    placeholder=\"Username\" />\r\n                </div>\r\n\r\n                <div className=\"ui-select-with-name\">\r\n                    <div className=\"ui-input-name1\">Input type</div>\r\n                    <select\r\n                    name=\"input_type\"\r\n                    onChange={ this.onInputChange }\r\n                    value={ this.state.component_props.input_type || \"\" }\r\n                    className=\"ui-input1\">\r\n                        <option value=\"text\">Text</option>\r\n                        <option value=\"number\">Number</option>\r\n                        <option value=\"email\">Email</option>\r\n                        <option value=\"password\">Password</option>\r\n                        <option value=\"url\">URL</option>\r\n                        <option value=\"date\">Date</option>\r\n                        <option value=\"datetime-local\">Date and time</option>\r\n                        <option value=\"month\">Month and year</option>\r\n                        <option value=\"time\">Time</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Default value</div>\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"default_value\"\r\n                    className=\"ui-input1\"\r\n                    onChange={ this.onInputChange }\r\n                    value={ this.state.component_props.default_value || \"\" }\r\n                    placeholder=\"foobar\" />\r\n                </div>\r\n\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">Pattern</div>\r\n                    <input\r\n                    type=\"text\"\r\n                    name=\"pattern\"\r\n                    className=\"ui-input1 monospace\"\r\n                    onChange={ this.onInputChange }\r\n                    value={ this.state.component_props.pattern || \"\" }\r\n                    placeholder=\"[A-Za-z]\" />\r\n                </div>\r\n            </DraggableComponentConfigPanel>\r\n        )\r\n    }\r\n}\r\n\r\n_DC_Input_CP.propTypes = {\r\n    target_component_id: PropTypes.string.isRequired,\r\n\r\n    store_config: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nexport const DC_Input_CP = connect(mapStateToProps)(_DC_Input_CP);\r\n\r\nclass DC_Input extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: \"\"\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Check if this component has default value\r\n        if( this.props.component_id !== \"-1\" &&\r\n            this.props.store_config &&\r\n            this.props.store_config.components[this.props.component_id].prop\r\n        ) {\r\n            this.setState({\r\n                value: this.props.store_config.components[this.props.component_id].props.default_value || \"\"\r\n            });\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        const state = {};\r\n\r\n        // TODO: @performance Maybe we should do this in onBlur function\r\n        if(!event.target.checkValidity()) state.invalid = true;\r\n        else state.invalid = false;\r\n\r\n        state.value = event.target.value;\r\n\r\n        this.setState(state);\r\n    }\r\n\r\n    render() {\r\n        // TODO: @performance move from here\r\n\r\n        // This is the \"style\" props for this component, if you need to access config_store, component_id, or anything\r\n        // else internal, use this.props instead\r\n        let style_props;\r\n\r\n        // Check if this component is in redux store\r\n        if( this.props.component_id !== \"-1\" && this.props.store_config &&\r\n            this.props.store_config.components[this.props.component_id] ) {\r\n            style_props = this.props.store_config.components[this.props.component_id].props || {};\r\n        } else {\r\n            // This component is not in the redux store, it's styles are probably in this.props\r\n            style_props = this.props;\r\n        }\r\n\r\n        return (\r\n            <DraggableComponent component_id={ this.props.component_id }>\r\n                <div className=\"ui-input-with-name\">\r\n                    <div className=\"ui-input-name1\">{ style_props.display_name || \"Input field\" }</div>\r\n                    <input\r\n                    type={ style_props.input_type || \"text\" }\r\n                    name={ style_props.api_name }\r\n                    className={ \"ui-input1\" + (this.state.invalid ? \" invalid\" : \"\") }\r\n                    value={ this.state.value }\r\n                    pattern={ style_props.pattern }\r\n\r\n                    onChange={ this.onChange } />\r\n                </div>\r\n            </DraggableComponent>\r\n        );\r\n    }\r\n}\r\n\r\nDC_Input.propTypes = {\r\n    api_name: PropTypes.string,\r\n    default_value: PropTypes.string,\r\n    pattern: PropTypes.string,\r\n\r\n    store_config: PropTypes.object,\r\n\r\n    component_id: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default connect(mapStateToProps)(DC_Input);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DraggableComponent from \"../components/DraggableComponent\";\r\n\r\nimport { createDraggableComponentFromType } from \"../tools\";\r\nimport { config_component_edit_children, config_edit_component} from \"../actions\";\r\n\r\n// Left panel config for this component\r\nexport class DC_Container_CP extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"component-intro-block\">\r\n                    <div className=\"name\">Horizontal container</div>\r\n                    <div className=\"description\">Used to horizontally position other components.</div>\r\n                </div>\r\n\r\n                <div className=\"ui-text\">ð§ Options will be here...</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass DC_Ð¡ontainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dragOver: false,\r\n            child_components: []\r\n        }\r\n\r\n        this.onDragEnter = this.onDragEnter.bind(this);\r\n        this.onDragLeave = this.onDragLeave.bind(this);\r\n        this.onDragOver = this.onDragOver.bind(this);\r\n        this.onDrop = this.onDrop.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(next_props, next_state) {\r\n        // On child_components update (happens when a component changes in `config` redux store)\r\n        if(next_state.child_components !== this.state.child_components) return true;\r\n\r\n        // DragOver change\r\n        if(next_state.dragOver !== this.state.dragOver) return true;\r\n\r\n        // Check if the component changed in `config` redux store\r\n        if( next_props.store_config.components[this.props.component_id]\r\n            !==\r\n            this.props.store_config.components[this.props.component_id]\r\n        ) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        // To make things a bit less messy\r\n        const store_component = this.props.store_config.components[this.props.component_id];\r\n\r\n        // Component's config changed\r\n        if(prev_props.store_config.components[this.props.component_id] !== store_component) {\r\n            // Get all child_components for this container\r\n            const l = store_component.child_components.length;\r\n            const child_components = [];\r\n\r\n            for(let i = 0; i < l; i++) {\r\n                const component_id = store_component.child_components[i];\r\n                const component = this.props.store_config.components[component_id];\r\n\r\n                // Check if component is not deleted\r\n                if(component) {\r\n                    child_components.push(component.element);\r\n                }\r\n            }\r\n\r\n            this.setState({ child_components });\r\n        }\r\n    }\r\n\r\n    onDragEnter(e) {\r\n        this.setState({ dragOver: true });\r\n\r\n        e.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    onDragLeave(e) {\r\n        this.setState({ dragOver: false });\r\n\r\n        e.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    onDragOver(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    onDrop(e) {\r\n        // Get the component type from dataTransfer\r\n        const component_type = e.dataTransfer.getData(\"text\");\r\n\r\n        // Check if user is trying to drop a container inside a container\r\n        // TODO: @css maybe flash the container red to indicate that you can't do that\r\n        if(component_type === \"horizontal_container\") {\r\n            this.setState({ dragOver: false });\r\n\r\n            e.stopPropagation();\r\n            return false;\r\n        }\r\n\r\n        // Create a new component from type\r\n        const new_component = createDraggableComponentFromType(component_type);\r\n\r\n        // Check if new component was reutrned (the function above returns false on error)\r\n        if(new_component) {\r\n            // Updated component's child_components (ids)\r\n            let new_child_components;\r\n\r\n            // New component object for `config` redux store\r\n            // TODO: @misc We should have an interface for component object\r\n            const new_component_object = {\r\n                element: new_component,\r\n                type: component_type,\r\n                panel_id: this.props.panel_id\r\n            }\r\n\r\n            // Check if this component (DC_Container) has children\r\n            if(this.props.store_config.components[this.props.component_id].child_components) {\r\n                // TODO: @performance\r\n                new_child_components = [\r\n                    ...this.props.store_config.components[this.props.component_id].child_components,\r\n                    new_component.props.component_id\r\n                ]\r\n            } else {\r\n                new_child_components = [new_component.props.component_id];\r\n            }\r\n\r\n            // Add the new component to the store\r\n            config_edit_component(new_component_object, this.props.dispatch);\r\n\r\n            // Append the new component to this DC_Container\r\n            config_component_edit_children(this.props.component_id, new_child_components, this.props.dispatch);\r\n        }\r\n\r\n        this.setState({ dragOver: false });\r\n\r\n        e.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DraggableComponent component_id={ this.props.component_id }>\r\n                <div\r\n                className={ \"ui-ccontainer\" + (this.state.dragOver ? \" drag-over\" : \"\") }\r\n\r\n                onDragEnter={ this.onDragEnter }\r\n                onDragLeave={ this.onDragLeave }\r\n                onDrop={ this.onDrop }\r\n                onDragOver={ this.onDragOver }\r\n                >\r\n                    { this.state.child_components }\r\n                </div>\r\n            </DraggableComponent>\r\n        );\r\n    }\r\n}\r\n\r\nDC_Ð¡ontainer.propTypes = {\r\n    component_id: PropTypes.string.isRequired,\r\n    panel_id: PropTypes.string.isRequired,\r\n\r\n    dispatch: PropTypes.func.isRequired,\r\n    store_config: PropTypes.object.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DC_Ð¡ontainer);\r\n","import React from \"react\";\r\n\r\nimport DC_Button from \"./draggable_components/DC_Button\";\r\nimport DC_Input from \"./draggable_components/DC_Input\";\r\nimport DC_Container from \"./draggable_components/DC_Container\";\r\n\r\nexport function generateRandomId() {\r\n    return Math.floor(Math.random() * 9999999999).toString();\r\n}\r\n\r\n// TODO: @high @performance It's a better idea to insted get a react component function, instead of a component.\r\n// Like this: `return DC_Button`, instead of `return <DC_Button id=\"...\" />`\r\nexport function createDraggableComponentFromType(type, panel_id) {\r\n    const id = generateRandomId();\r\n\r\n    switch(type) {\r\n        case \"button\":\r\n            return <DC_Button key={ id } component_id={ id } />\r\n\r\n        case \"input\":\r\n            return <DC_Input key={ id } component_id={ id } />\r\n\r\n        case \"horizontal_container\":\r\n            return <DC_Container key={ id } component_id={ id } panel_id={ panel_id } />\r\n\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { createDraggableComponentFromType } from \"../tools\";\r\nimport { config_assign_component, config_delete_panel } from \"../actions\";\r\n\r\nclass DraggablePanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // TODO: @css Add dragOver styles\r\n            dragOver: false,\r\n            empty: true,\r\n            deleted: false,\r\n            child_components: []\r\n        }\r\n\r\n        this.deletePanel = this.deletePanel.bind(this);\r\n\r\n        this.onDragEnter = this.onDragEnter.bind(this);\r\n        this.onDragLeave = this.onDragLeave.bind(this);\r\n        this.onDragOver = this.onDragOver.bind(this);\r\n        this.onDrop = this.onDrop.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(next_props, next_state) {\r\n        // Deleted\r\n        if(this.state.deleted) return false;\r\n        if(next_state.deleted !== this.state.deleted) return true;\r\n\r\n        // Empty\r\n        if(next_state.empty !== this.state.empty) return true;\r\n\r\n        // On child_components update (happens when a panel changes in `config` redux store)\r\n        if(next_state.child_components !== this.state.child_components) return true;\r\n\r\n        // Check if the panel changed in `config` redux store\r\n        if(\r\n            next_props.store_config.panels[this.props.panel_id] !== this.props.store_config.panels[this.props.panel_id]\r\n        ) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate(prev_props) {\r\n        // This panel was deleted\r\n        if(this.props.store_config.panels[this.props.panel_id] === false) {\r\n            this.setState({ deleted: true });\r\n            return false;\r\n        }\r\n\r\n        // To make things a bit less messy\r\n        const store_panel = this.props.store_config.panels[this.props.panel_id];\r\n\r\n        // Panel config changed\r\n        if(prev_props.store_config.panels[this.props.panel_id] !== store_panel) {\r\n            // Get all child_components for this panel\r\n            const l = store_panel.child_components.length;\r\n\r\n            // If the panel is empty\r\n            if(l === 0) {\r\n                this.setState({ empty: true });\r\n                return;\r\n            }\r\n\r\n            const child_components = [];\r\n\r\n            for(let i = 0; i < l; i++) {\r\n                const component_id = store_panel.child_components[i];\r\n                const component = this.props.store_config.components[component_id];\r\n\r\n                // Check if component is not deleted\r\n                if(component) {\r\n                    child_components.push(component.element);\r\n                }\r\n            }\r\n\r\n            this.setState({ child_components, empty: false });\r\n        }\r\n    }\r\n\r\n    onDragEnter(e) {\r\n        this.setState({ dragOver: true });\r\n\r\n        e.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    onDragLeave(e) {\r\n        this.setState({ dragOver: false });\r\n\r\n        e.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    onDragOver(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    onDrop(e) {\r\n        // Get the component type from dataTransfer\r\n        const component_type = e.dataTransfer.getData(\"text\");\r\n\r\n        // Create a new component from type\r\n        const new_component = createDraggableComponentFromType(component_type, this.props.panel_id);\r\n\r\n        // Check if the new component was reutrned (the function above returns false on error)\r\n        if(new_component) {\r\n            // Assign component to panel in redux store (which will cause this panel to rerender with a new component)\r\n            config_assign_component(new_component, component_type, this.props.panel_id, this.props.dispatch);\r\n        }\r\n\r\n        this.setState({ dragOver: false });\r\n\r\n        e.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    deletePanel() {\r\n        config_delete_panel(this.props.panel_id, this.props.dispatch);\r\n\r\n        // Call parent's onDelete\r\n        this.props.onDelete && this.props.onDelete(this.props.panel_id);\r\n    }\r\n\r\n    render() {\r\n        if(this.state.deleted) return false;\r\n\r\n        return (\r\n            <div\r\n            className={\r\n                \"draggable-panel\" +\r\n                (this.state.dragOver ? \" drag-over\" : \"\") +\r\n                (this.state.empty ? \" empty\" : \"\")\r\n            }\r\n            panel_id={ this.props.panel_id }\r\n\r\n            onDragEnter={ this.onDragEnter }\r\n            onDragLeave={ this.onDragLeave }\r\n            onDrop={ this.onDrop }\r\n            onDragOver={ this.onDragOver }\r\n            >\r\n                { this.state.child_components }\r\n\r\n                { this.state.empty && <div className=\"center-text\">This panel is empty</div> }\r\n\r\n                <div className=\"panel-buttons\">\r\n                    <div className=\"button\"><i className=\"fas fa-sliders-h\"></i></div>\r\n                    <div className=\"button red\" onClick={ this.deletePanel }><i className=\"fas fa-times\"></i></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDraggablePanel.propTypes = {\r\n    panel_id: PropTypes.string.isRequired,\r\n    onDelete: PropTypes.func,\r\n\r\n    store_config: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_config: state.config };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DraggablePanel);\r\n","import {\r\n    EDITMODE_ENTER,\r\n    EDITMODE_LEAVE,\r\n    EDITMODE_SELECT_COMPONENT\r\n} from \"../actions\";\r\n\r\nconst INITIAL_STATE = {\r\n    active: false,\r\n    selected_component: undefined\r\n}\r\n\r\nexport default function(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        case EDITMODE_ENTER: {\r\n            return {\r\n                ...state,\r\n                active: true\r\n            }\r\n        }\r\n\r\n        case EDITMODE_LEAVE: {\r\n            return {\r\n                ...state,\r\n                active: false\r\n            }\r\n        }\r\n\r\n        case EDITMODE_SELECT_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                selected_component: action.component_id\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CONFIG_ADD_PANEL,\r\n    CONFIG_DELETE_PANEL,\r\n    CONFIG_DELETE_COMPONENT,\r\n    CONFIG_EDIT_COMPONENT,\r\n    CONFIG_COMPONENT_EDIT_CHILDREN,\r\n    CONFIG_PANEL_ADD_COMPONENT\r\n} from \"../actions\";\r\n\r\nconst INITIAL_STATE = {\r\n    panels: {},\r\n    components: {}\r\n}\r\n\r\nexport default function(state = INITIAL_STATE, action) {\r\n    switch(action.type) {\r\n        // TODO: @performance Maybe we should do it in a different way\r\n        case CONFIG_ADD_PANEL: {\r\n            return {\r\n                ...state,\r\n                panels: { ...state.panels, [action.panel.id]: action.panel }\r\n            }\r\n        }\r\n\r\n        case CONFIG_DELETE_PANEL: {\r\n            let new_components_object = state.components;\r\n\r\n            // Delete all components of this panel\r\n            for(const component_id of state.panels[action.panel_id].child_components) {\r\n                // Check if component is a container (i.e. also has child components)\r\n                if(new_components_object[component_id] && new_components_object[component_id].child_components) {\r\n                    // Delete all child components of the conteiner assigned to the panel that is to be deleted\r\n                    for(const child_component_id of new_components_object[component_id].child_components) {\r\n                        delete new_components_object[child_component_id];\r\n                    }\r\n                }\r\n\r\n                delete new_components_object[component_id];\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                panels: { ...state.panels, [action.panel_id]: false },\r\n                components: new_components_object\r\n            }\r\n        }\r\n\r\n        case CONFIG_DELETE_COMPONENT: {\r\n            let new_components_object = state.components;\r\n\r\n            // Check if component is a container (i.e. has child components)\r\n            if(new_components_object[action.component_id] &&\r\n            new_components_object[action.component_id].child_components) {\r\n                // Delete all child components of the conteiner\r\n                for(const child_component_id of new_components_object[action.component_id].child_components) {\r\n                    delete new_components_object[child_component_id];\r\n                }\r\n            }\r\n\r\n            delete new_components_object[action.component_id];\r\n\r\n            return {\r\n                ...state,\r\n                components: new_components_object\r\n            }\r\n        }\r\n\r\n        // TODO: @performance Maybe we should do it in a different way\r\n        case CONFIG_PANEL_ADD_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                panels: {\r\n                    ...state.panels,\r\n                    [action.panel_id]: {\r\n                        ...state.panels[action.panel_id],\r\n                        child_components: [ ...state.panels[action.panel_id].child_components, action.component_id ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: @performance Maybe we should do it in a different way\r\n        case CONFIG_EDIT_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                components: {\r\n                    ...state.components,\r\n                    [action.component_object.element.props.component_id]: action.component_object\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: @performance Maybe we should do it in a different way\r\n        case CONFIG_COMPONENT_EDIT_CHILDREN: {\r\n            return {\r\n                ...state,\r\n                components: {\r\n                    ...state.components,\r\n                    [action.component_id]: {\r\n                        ...state.components[action.component_id],\r\n                        child_components: action.child_components\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport edit_mode from \"./edit_mode\";\r\nimport config from \"./config\";\r\n\r\nexport default combineReducers({ edit_mode, config });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    undefined,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { editmode_enter, editmode_leave } from \"../actions\";\r\n\r\nimport \"./TopPanel.css\";\r\n\r\nclass TopPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.switchEditmode = this.switchEditmode.bind(this);\r\n    }\r\n\r\n    switchEditmode() {\r\n        if(this.props.store_editmode.active) editmode_leave(this.props.dispatch);\r\n        else editmode_enter(this.props.dispatch);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"top-panel\">\r\n                <div className=\"left\"></div>\r\n                <div className=\"middle\"></div>\r\n                <div className=\"right\">\r\n                    <div className=\"buttons\">\r\n                        <div\r\n                        className={\"button ui-tooltip-container\" + (this.props.store_editmode.active ? \" active\" : \"\")}\r\n                        onClick={ this.switchEditmode } >\r\n                            <i className=\"material-icons\">edit</i>\r\n\r\n                            <div className=\"ui-tooltip bottom\">\r\n                                { this.props.store_editmode.active ? \"Leave edit mode\" : \"Enter edit mode\" }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"user-avatar\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTopPanel.propTypes = {\r\n    store_editmode: PropTypes.object.isRequired,\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_editmode: state.edit_mode };\r\n}\r\n\r\nexport default connect(mapStateToProps)(TopPanel);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { config_create_panel } from \"../actions\";\r\n\r\nclass RootPanelContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            child_panels: [],\r\n            deleted: false\r\n        }\r\n\r\n        this.createNewPanel = this.createNewPanel.bind(this);\r\n        this.onPanelDeleted = this.onPanelDeleted.bind(this);\r\n    }\r\n\r\n    createNewPanel() {\r\n        const new_panel = config_create_panel(this.props.dispatch);\r\n\r\n        const new_panel_object = {\r\n            panel_id: new_panel.props.panel_id,\r\n            element: new_panel\r\n        }\r\n\r\n        this.setState({ child_panels: [\r\n            ...this.state.child_panels,\r\n            new_panel_object\r\n        ] });\r\n\r\n        // Call parent's onClick\r\n        this.props.onClick && this.props.onClick();\r\n    }\r\n\r\n    onPanelDeleted(panel_id) {\r\n        const new_state = this.state;\r\n\r\n        // Find panel to remove\r\n        for(const i in new_state.child_panels) {\r\n            if(new_state.child_panels[i].panel_id === panel_id) {\r\n                new_state.child_panels.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Deleted the last panel in the container\r\n        if(new_state.child_panels.length === 0) {\r\n            new_state.deleted = true;\r\n        }\r\n\r\n        this.setState(new_state);\r\n    }\r\n\r\n    render() {\r\n        if(this.state.deleted) return false;\r\n\r\n        let panels = [];\r\n\r\n        // TODO: @performance maybe?\r\n        for(const panel of this.state.child_panels) {\r\n            panels.push(React.cloneElement(panel.element, {\r\n                panel_id: panel.panel_id,\r\n                onDelete: this.onPanelDeleted\r\n            }));\r\n        }\r\n\r\n        return (\r\n            <div\r\n            className={\"root-panels-container\" + (this.props.hidden ? \" hidden\" : \"\")\r\n            + (this.props.new_container ? \" new_container\" : \"\")}>\r\n                { panels }\r\n\r\n                <div className=\"panel-placeholder\"\r\n                onClick={ this.createNewPanel } >\r\n                    { this.props.new_container\r\n                    ? <div className=\"add-icon\"><i className=\"fas fa-chevron-right\"></i></div>\r\n                    : <div className=\"add-icon\"><i className=\"fas fa-plus\"></i></div> }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRootPanelContainer.propTypes = {\r\n    onClick: PropTypes.func,\r\n    new_container: PropTypes.bool,\r\n    hidden: PropTypes.bool,\r\n\r\n    dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_editmode: state.edit_mode };\r\n}\r\n\r\nexport default connect(mapStateToProps)(RootPanelContainer);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Component extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onDragStart = this.onDragStart.bind(this);\r\n    }\r\n\r\n    onDragStart(e) {\r\n        e.dataTransfer.effectAllowed = \"move\";\r\n        e.dataTransfer.setData(\"text\", this.props.component_type);\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item\" draggable onDragStart={ this.onDragStart }>\r\n                <div className=\"component\">{ this.props.children }</div>\r\n                <div className=\"name\">{ this.props.name }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nComponent.propTypes = {\r\n    component_type: PropTypes.string.isRequired,\r\n\r\n    name: PropTypes.string.isRequired,\r\n    children: PropTypes.any.isRequired\r\n}\r\n\r\n// TODO: @functionality allow horizontal scrolling in the future\r\nexport default class DraggableComponentsDrawer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"draggable-components-drawer\">\r\n                <div className=\"container\">\r\n                    <Component name=\"Button\" component_type=\"button\">\r\n                        <button className=\"ui-button1 bigger\">button</button>\r\n                    </Component>\r\n\r\n                    <Component name=\"Input field\" component_type=\"input\">\r\n                        <div className=\"ui-input-with-name\">\r\n                            <div className=\"ui-input-name1\">Input field</div>\r\n                            <input type=\"text\" className=\"ui-input1\" style={ {width:\"100px\"} } />\r\n                        </div>\r\n                    </Component>\r\n\r\n                    <Component name=\"Container\" component_type=\"horizontal_container\">\r\n                        <div className=\"components-container\">\r\n                            <div></div>\r\n                        </div>\r\n                    </Component>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport RootPanelsContainer from \"../components/RootPanelsContainer\";\r\nimport DraggableComponentsDrawer from \"../components/DraggableComponentsDrawer\";\r\n\r\nimport \"./DynamicPage.css\";\r\n\r\nclass DynamicPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            root_panel_containers_count: 1\r\n        }\r\n\r\n        this.createRootContainer = this.createRootContainer.bind(this);\r\n    }\r\n\r\n    createRootContainer() {\r\n        this.setState({ root_panel_containers_count: this.state.root_panel_containers_count + 1 })\r\n    }\r\n\r\n    render() {\r\n        const containers = [];\r\n\r\n        for(let i = 0; i < this.state.root_panel_containers_count; i++) {\r\n            containers.push(<RootPanelsContainer key={ i } />);\r\n        }\r\n\r\n        return (\r\n            <div className={ \"route dynamic-page\" + (this.props.store_editmode.active ? \" edit-mode\" : \"\") }>\r\n                { containers }\r\n\r\n                <RootPanelsContainer\r\n                key={ this.state.root_panel_containers_count + 1 }\r\n                new_container\r\n                hidden={ !this.props.store_editmode.active }\r\n                onClick={ this.createRootContainer } />\r\n\r\n                <DraggableComponentsDrawer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nDynamicPage.propTypes = {\r\n    store_editmode: PropTypes.object.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_editmode: state.edit_mode };\r\n}\r\n\r\nexport default connect(mapStateToProps)(DynamicPage);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { DC_Input_CP } from \"../draggable_components/DC_Input\";\r\nimport { DC_Button_CP } from \"../draggable_components/DC_Button\";\r\nimport { DC_Container_CP } from \"../draggable_components/DC_Container\";\r\n\r\nimport \"./LeftPanel.css\";\r\n\r\nclass ComponentEditMode extends React.Component {\r\n    // TODO: @placeholder We should make this dynamic to allow users to add custom draggable components\r\n    /*\r\n        Something like this:\r\n        const ConfigPanel = getConfigPanelForComponent(\"customcomponent\");\r\n        return <ConfigPanel />;\r\n    */\r\n    render() {\r\n        if(!this.props.store_editmode.active || !this.props.store_editmode.selected_component) return false;\r\n\r\n        const selected_component_id = this.props.store_editmode.selected_component;\r\n        const selected_component = this.props.store_config.components[selected_component_id];\r\n\r\n        // Component was deleted\r\n        if(!selected_component) return false;\r\n\r\n        switch(selected_component.type) {\r\n            case \"input\":\r\n                return <DC_Input_CP target_component_id={ selected_component_id } />;\r\n            case \"button\":\r\n                return <DC_Button_CP target_component_id={ selected_component_id } />;\r\n            case \"horizontal_container\":\r\n                return <DC_Container_CP target_component_id={ selected_component_id } />;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n}\r\n\r\nclass LeftPanel extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"left-panel\" className={ this.props.store_editmode.active ? \"shown\" : \"\" }>\r\n                { this.props.store_editmode.active &&\r\n                <ComponentEditMode\r\n                store_editmode={ this.props.store_editmode }\r\n                store_config={ this.props.store_config }\r\n                /> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nComponentEditMode.propTypes = {\r\n    store_editmode: PropTypes.object.isRequired,\r\n    store_config: PropTypes.object.isRequired\r\n}\r\n\r\nLeftPanel.propTypes = {\r\n    store_editmode: PropTypes.object.isRequired,\r\n    store_config: PropTypes.object.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { store_editmode: state.edit_mode, store_config: state.config };\r\n}\r\n\r\nexport default connect(mapStateToProps)(LeftPanel);\r\n\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport store from \"./redux-store\";\r\n\r\nimport TopPanel from \"./components/TopPanel\";\r\nimport DynamicPage from \"./routes/DynamicPage\";\r\nimport LeftPanel from \"./components/LeftPanel\";\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.store = store;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Provider store={ this.store }>\r\n                    <TopPanel />\r\n\r\n                    <div id=\"content\">\r\n                        <LeftPanel />\r\n\r\n                        <div id=\"router\">\r\n                            <Route path=\"/:page_id\" component={ DynamicPage } />\r\n                            <Route path=\"*\" component={ () => <div>Go to /something to see an exaple</div> } />\r\n                        </div>\r\n                    </div>\r\n                </Provider>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\nimport \"./ui.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}